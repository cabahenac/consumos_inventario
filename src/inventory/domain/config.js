
const reqConfig = {
  login: {
    uri: '/Login.aspx',
    commonData: {
      __LASTFOCUS: '',
      __EVENTTARGET: '',
      __EVENTARGUMENT: '',
      __VIEWSTATE: '/wEPDwUJLTMxNDUzMzcyZBgBBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WAgUXTG9naW4xJExvZ2luSW1hZ2VCdXR0b24FN1Bhc3N3b3JkUmVjb3ZlcnkxJFVzZXJOYW1lQ29udGFpbmVySUQkU3VibWl0SW1hZ2VCdXR0b27JchTmM/smYgwfFRhXIoyaxmTSmg==',
      __VIEWSTATEGENERATOR: 'C2EE9ABB',
      __EVENTVALIDATION: '/wEWBgLlpNzICgKUvNa1DwL666vYDAKnz4ybCALM1sHnCgK8lteMCvxsskT7SnXhPUIuQQ8jj9A2y/uL',
      Login1$LoginButton: 'Aceptar',
      PasswordRecovery1$UserNameContainerID$UserName: '',
    }
  },
  
  search: {
    uri: '/Inventarios/ConsumoReacLabMasivo.aspx',
    commonData: {
      ctl00$ContentMasterPage$ScriptManager1: 'ctl00$ContentMasterPage$UpdatePanel1|ctl00$ContentMasterPage$btnBuscarEstudio',
      __LASTFOCUS: '',
      __EVENTTARGET: '', 
      __EVENTARGUMENT: '', 
      ctl00_treePrincipal_ExpandState: 'eunnnnnnnnnnnnnunnnnnnnnnnnnnnunnnnunnnnnnnnnnnennnunnun',
      ctl00_treePrincipal_SelectedNode: 'ctl00_treePrincipalt48',
      __VIEWSTATE: "",
      __VIEWSTATEGENERATOR: '81A526C4',
      __EVENTVALIDATION: '/wEWMgKl4pa4DwL66ZujDwKP962oBQLLz7SHAgKgodW7AwLEoJ7pDgLFoJ7pDgLGoJ7pDgLHoJ7pDgLBoJ7pDgLcoJ7pDgLlwMuZCQKOrqqlCALvr6H0BQLur8H3BQLur5H0BQLvr+H3BQL3k7+XDQLqr6n0BQKdqZFgAumvkfQFAuivkfQFAuqvmfQFAu+vmfQFArvAiv0GAu+vrfQFAu6vzfcFAuiv4fcFAuqvrfQFAvKv4fcFAuivzfcFAumvmfQFAuqvkfQFAsn8xb0HAuuvwfcFAuuvzfcFAu6vofQFAqHX7NYMAuyv4fcFAuuvlfQFAsirxowDAqPFp7ACAsbE7OIPAsXE7OIPAoa3nbABAr3K1bwLAvmowt8FAsy51WsC1KqatgUC4+nN4gw6S2SJyBOscYw4C1/0ibj3kG7oUQ==',
      ctl00$ContentMasterPage$txtFecDesde_MaskedEditExtender_ClientState: '',
      ctl00$ContentMasterPage$ddlSuc: 2,
      ctl00$ContentMasterPage$hfActivo: 0,
      ctl00$ContentMasterPage$hfCalcAuto: 1,
      ctl00$ContentMasterPage$btnBuscarEstudio: 'Buscar',
    },
  },

  save: {
    uri: '/Inventarios/ConsumoReacLabMasivo.aspx',
    commonData: {
      ctl00$ContentMasterPage$ScriptManager1: 'ctl00$ContentMasterPage$UpdatePanel1|ctl00$ContentMasterPage$btnGuardaMasivo',
      __LASTFOCUS: '',
      __EVENTTARGET: '',
      __EVENTARGUMENT: '',
      ctl00_treePrincipal_ExpandState: 'eunnnnnnnnnnnnnunnnnnnnnnnnnnnnunnnnunnnnnnnnnnnennnunnun',
      ctl00_treePrincipal_SelectedNode: 'ctl00_treePrincipalt49',
      __VIEWSTATE: '',
      __VIEWSTATEGENERATOR: '81A526C4',
      __EVENTVALIDATION: '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BgKp/ft/As/8sK0NAs38sK0NAs78sK0NAsz8sK0NAtrPvc4BAvK+xtQCApC/jYYPApO/jYYPApS/jYYPApW/jYYPApe/jYYPApa/jYYPAoG/jYYPAo6/jYYPApK/jYYPAtTg+YIMApfJ+9EDArD+u4wBAufRk4oBAsStluYOAvz7xfgLAon3+KIOAsaIlvAGAvOukaoCAo6sk/gPAuit2KoCAuqt2KoCAumt2KoCAuut2KoCAtahs/UFApmokI8OAvup290DAvip290DAv+p290DAv6p290DAvyp290DAv2p290DAuqp290DAuWp290DAvmp290DAtTgxYIMAsirk8MJApyj98INAtma5O4GAu2H6v4OAvXtpLgJArSa2tUGAqngvtgFAp/38sUEAu/urMoMAonv55gBAovv55gBAojv55gBAorv55gBAq6Ky48IArn6ntkKAtv71YsHAtj71YsHAt/71YsHAt771YsHAtz71YsHAt371YsHAsr71YsHAsX71YsHAtn71YsHAtTgwYIMAqeDq4oMApyjm/gDAqmHm/YMAsKyl/wEAvXt6MMOAqnr75UGAsjem8sJAq+05IIJAvXD4IUKApPCq9cHApHCq9cHApLCq9cHApDCq9cHAvfs7YUIAp+M6bkOAv2NousDAv6NousDAvmNousDAviNousDAvqNousDAvuNousDAuyNousDAuONousDAv+NousDAtTg7YIMAveW1bYGAqvhh+UNAtfd4PMKArf8w/gFApzjseEGArmpwPEIAqm3/rIDAsfK+PYEApqardYFAvyb5oQIAv6b5oQIAv2b5oQIAv+b5oQIAv/9nI0IAuqJ/NcDAoiIt4UOAouIt4UOAoyIt4UOAo2It4UOAo+It4UOAo6It4UOApmIt4UOApaIt4UOAoqIt4UOAtTg6YIMAqz/5NoIAsbKycoHAuyHtKEMAuf7uSYCnOP1lAIC6by5nwcC2backQECs4qQmAoC7IuX1Q4CiorchwMCiIrchwMCi4rchwMCiYrchwMCr/2SrwUC3MjsrwQCvsmn/QkCvcmn/QkCusmn/QkCu8mn/QkCucmn/QkCuMmn/QkCr8mn/QkCoMmn/QkCvMmn/QkCy+DNggwC173n6wQCxsrNpg4CjbD0kgwCoofw6QQCgfrL4wYCtvLWdALGzuvzCgKImY2kBwL/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',
      ctl00$ContentMasterPage$txtFecDesde_MaskedEditExtender_ClientState: '',
      ctl00$ContentMasterPage$ddlSuc: 2,
      ctl00$ContentMasterPage$cmbEquipo: 6,
      ctl00$ContentMasterPage$cmbMesaOrdenac: 2,
      ctl00$ContentMasterPage$hfActivo: 0,
      ctl00$ContentMasterPage$hfCalcAuto: 0,
      ctl00$ContentMasterPage$grdConsumo$ctl01$chkProvAll:'on',
      ctl00$ContentMasterPage$btnGuardaMasivo: 'Guardar Consumo',
    },
  },
};

export { reqConfig };